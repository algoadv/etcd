// Code generated by protoc-gen-go.
// source: route+AF8-guide.proto
// DO NOT EDIT+ACE-

/+ACo-
Package proto is a generated protocol buffer package.

It is generated from these files:
	route+AF8-guide.proto

It has these top-level messages:
	Point
	Rectangle
	Feature
	RouteNote
	RouteSummary
+ACo-/
package proto

import proto1 +ACI-github.com/algoadv/etcd/Godeps/+AF8-workspace/src/github.com/golang/protobuf/proto+ACI-

import (
	context +ACI-github.com/algoadv/etcd/Godeps/+AF8-workspace/src/golang.org/x/net/context+ACI-
	grpc +ACI-github.com/algoadv/etcd/Godeps/+AF8-workspace/src/google.golang.org/grpc+ACI-
)

// Reference imports to suppress errors if they are not otherwise used.
var +AF8- context.Context
var +AF8- grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var +AF8- +AD0- proto1.Marshal

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10+ACoAKg-7 and rounded to the nearest integer).
// Latitudes should be in the range  90 degrees and longitude should be in
// the range  180 degrees (inclusive).
type Point struct +AHs-
	Latitude  int32 +AGA-protobuf:+ACI-varint,1,opt,name+AD0-latitude+ACI- json:+ACI-latitude,omitempty+ACIAYA-
	Longitude int32 +AGA-protobuf:+ACI-varint,2,opt,name+AD0-longitude+ACI- json:+ACI-longitude,omitempty+ACIAYA-
+AH0-

func (m +ACo-Point) Reset()         +AHs- +ACo-m +AD0- Point+AHsAfQ- +AH0-
func (m +ACo-Point) String() string +AHs- return proto1.CompactTextString(m) +AH0-
func (+ACo-Point) ProtoMessage()    +AHsAfQ-

// A latitude-longitude rectangle, represented as two diagonally opposite
// points +ACI-lo+ACI- and +ACI-hi+ACI-.
type Rectangle struct +AHs-
	// One corner of the rectangle.
	Lo +ACo-Point +AGA-protobuf:+ACI-bytes,1,opt,name+AD0-lo+ACI- json:+ACI-lo,omitempty+ACIAYA-
	// The other corner of the rectangle.
	Hi +ACo-Point +AGA-protobuf:+ACI-bytes,2,opt,name+AD0-hi+ACI- json:+ACI-hi,omitempty+ACIAYA-
+AH0-

func (m +ACo-Rectangle) Reset()         +AHs- +ACo-m +AD0- Rectangle+AHsAfQ- +AH0-
func (m +ACo-Rectangle) String() string +AHs- return proto1.CompactTextString(m) +AH0-
func (+ACo-Rectangle) ProtoMessage()    +AHsAfQ-

func (m +ACo-Rectangle) GetLo() +ACo-Point +AHs-
	if m +ACEAPQ- nil +AHs-
		return m.Lo
	+AH0-
	return nil
+AH0-

func (m +ACo-Rectangle) GetHi() +ACo-Point +AHs-
	if m +ACEAPQ- nil +AHs-
		return m.Hi
	+AH0-
	return nil
+AH0-

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
type Feature struct +AHs-
	// The name of the feature.
	Name string +AGA-protobuf:+ACI-bytes,1,opt,name+AD0-name+ACI- json:+ACI-name,omitempty+ACIAYA-
	// The point where the feature is detected.
	Location +ACo-Point +AGA-protobuf:+ACI-bytes,2,opt,name+AD0-location+ACI- json:+ACI-location,omitempty+ACIAYA-
+AH0-

func (m +ACo-Feature) Reset()         +AHs- +ACo-m +AD0- Feature+AHsAfQ- +AH0-
func (m +ACo-Feature) String() string +AHs- return proto1.CompactTextString(m) +AH0-
func (+ACo-Feature) ProtoMessage()    +AHsAfQ-

func (m +ACo-Feature) GetLocation() +ACo-Point +AHs-
	if m +ACEAPQ- nil +AHs-
		return m.Location
	+AH0-
	return nil
+AH0-

// A RouteNote is a message sent while at a given point.
type RouteNote struct +AHs-
	// The location from which the message is sent.
	Location +ACo-Point +AGA-protobuf:+ACI-bytes,1,opt,name+AD0-location+ACI- json:+ACI-location,omitempty+ACIAYA-
	// The message to be sent.
	Message string +AGA-protobuf:+ACI-bytes,2,opt,name+AD0-message+ACI- json:+ACI-message,omitempty+ACIAYA-
+AH0-

func (m +ACo-RouteNote) Reset()         +AHs- +ACo-m +AD0- RouteNote+AHsAfQ- +AH0-
func (m +ACo-RouteNote) String() string +AHs- return proto1.CompactTextString(m) +AH0-
func (+ACo-RouteNote) ProtoMessage()    +AHsAfQ-

func (m +ACo-RouteNote) GetLocation() +ACo-Point +AHs-
	if m +ACEAPQ- nil +AHs-
		return m.Location
	+AH0-
	return nil
+AH0-

// A RouteSummary is received in response to a RecordRoute rpc.
//
// It contains the number of individual points received, the number of
// detected features, and the total distance covered as the cumulative sum of
// the distance between each point.
type RouteSummary struct +AHs-
	// The number of points received.
	PointCount int32 +AGA-protobuf:+ACI-varint,1,opt,name+AD0-point+AF8-count+ACI- json:+ACI-point+AF8-count,omitempty+ACIAYA-
	// The number of known features passed while traversing the route.
	FeatureCount int32 +AGA-protobuf:+ACI-varint,2,opt,name+AD0-feature+AF8-count+ACI- json:+ACI-feature+AF8-count,omitempty+ACIAYA-
	// The distance covered in metres.
	Distance int32 +AGA-protobuf:+ACI-varint,3,opt,name+AD0-distance+ACI- json:+ACI-distance,omitempty+ACIAYA-
	// The duration of the traversal in seconds.
	ElapsedTime int32 +AGA-protobuf:+ACI-varint,4,opt,name+AD0-elapsed+AF8-time+ACI- json:+ACI-elapsed+AF8-time,omitempty+ACIAYA-
+AH0-

func (m +ACo-RouteSummary) Reset()         +AHs- +ACo-m +AD0- RouteSummary+AHsAfQ- +AH0-
func (m +ACo-RouteSummary) String() string +AHs- return proto1.CompactTextString(m) +AH0-
func (+ACo-RouteSummary) ProtoMessage()    +AHsAfQ-

func init() +AHs-
+AH0-

// Client API for RouteGuide service

type RouteGuideClient interface +AHs-
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// If no feature is found for the given point, a feature with an empty name
	// should be returned.
	GetFeature(ctx context.Context, in +ACo-Point, opts ...grpc.CallOption) (+ACo-Feature, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(ctx context.Context, in +ACo-Rectangle, opts ...grpc.CallOption) (RouteGuide+AF8-ListFeaturesClient, error)
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuide+AF8-RecordRouteClient, error)
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuide+AF8-RouteChatClient, error)
+AH0-

type routeGuideClient struct +AHs-
	cc +ACo-grpc.ClientConn
+AH0-

func NewRouteGuideClient(cc +ACo-grpc.ClientConn) RouteGuideClient +AHs-
	return +ACY-routeGuideClient+AHs-cc+AH0-
+AH0-

func (c +ACo-routeGuideClient) GetFeature(ctx context.Context, in +ACo-Point, opts ...grpc.CallOption) (+ACo-Feature, error) +AHs-
	out :+AD0- new(Feature)
	err :+AD0- grpc.Invoke(ctx, +ACI-/proto.RouteGuide/GetFeature+ACI-, in, out, c.cc, opts...)
	if err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return out, nil
+AH0-

func (c +ACo-routeGuideClient) ListFeatures(ctx context.Context, in +ACo-Rectangle, opts ...grpc.CallOption) (RouteGuide+AF8-ListFeaturesClient, error) +AHs-
	stream, err :+AD0- grpc.NewClientStream(ctx, +ACYAXw-RouteGuide+AF8-serviceDesc.Streams+AFs-0+AF0-, c.cc, +ACI-/proto.RouteGuide/ListFeatures+ACI-, opts...)
	if err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	x :+AD0- +ACY-routeGuideListFeaturesClient+AHs-stream+AH0-
	if err :+AD0- x.ClientStream.SendMsg(in)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	if err :+AD0- x.ClientStream.CloseSend()+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return x, nil
+AH0-

type RouteGuide+AF8-ListFeaturesClient interface +AHs-
	Recv() (+ACo-Feature, error)
	grpc.ClientStream
+AH0-

type routeGuideListFeaturesClient struct +AHs-
	grpc.ClientStream
+AH0-

func (x +ACo-routeGuideListFeaturesClient) Recv() (+ACo-Feature, error) +AHs-
	m :+AD0- new(Feature)
	if err :+AD0- x.ClientStream.RecvMsg(m)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return m, nil
+AH0-

func (c +ACo-routeGuideClient) RecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteGuide+AF8-RecordRouteClient, error) +AHs-
	stream, err :+AD0- grpc.NewClientStream(ctx, +ACYAXw-RouteGuide+AF8-serviceDesc.Streams+AFs-1+AF0-, c.cc, +ACI-/proto.RouteGuide/RecordRoute+ACI-, opts...)
	if err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	x :+AD0- +ACY-routeGuideRecordRouteClient+AHs-stream+AH0-
	return x, nil
+AH0-

type RouteGuide+AF8-RecordRouteClient interface +AHs-
	Send(+ACo-Point) error
	CloseAndRecv() (+ACo-RouteSummary, error)
	grpc.ClientStream
+AH0-

type routeGuideRecordRouteClient struct +AHs-
	grpc.ClientStream
+AH0-

func (x +ACo-routeGuideRecordRouteClient) Send(m +ACo-Point) error +AHs-
	return x.ClientStream.SendMsg(m)
+AH0-

func (x +ACo-routeGuideRecordRouteClient) CloseAndRecv() (+ACo-RouteSummary, error) +AHs-
	if err :+AD0- x.ClientStream.CloseSend()+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	m :+AD0- new(RouteSummary)
	if err :+AD0- x.ClientStream.RecvMsg(m)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return m, nil
+AH0-

func (c +ACo-routeGuideClient) RouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteGuide+AF8-RouteChatClient, error) +AHs-
	stream, err :+AD0- grpc.NewClientStream(ctx, +ACYAXw-RouteGuide+AF8-serviceDesc.Streams+AFs-2+AF0-, c.cc, +ACI-/proto.RouteGuide/RouteChat+ACI-, opts...)
	if err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	x :+AD0- +ACY-routeGuideRouteChatClient+AHs-stream+AH0-
	return x, nil
+AH0-

type RouteGuide+AF8-RouteChatClient interface +AHs-
	Send(+ACo-RouteNote) error
	Recv() (+ACo-RouteNote, error)
	grpc.ClientStream
+AH0-

type routeGuideRouteChatClient struct +AHs-
	grpc.ClientStream
+AH0-

func (x +ACo-routeGuideRouteChatClient) Send(m +ACo-RouteNote) error +AHs-
	return x.ClientStream.SendMsg(m)
+AH0-

func (x +ACo-routeGuideRouteChatClient) Recv() (+ACo-RouteNote, error) +AHs-
	m :+AD0- new(RouteNote)
	if err :+AD0- x.ClientStream.RecvMsg(m)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return m, nil
+AH0-

// Server API for RouteGuide service

type RouteGuideServer interface +AHs-
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// If no feature is found for the given point, a feature with an empty name
	// should be returned.
	GetFeature(context.Context, +ACo-Point) (+ACo-Feature, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the Features available within the given Rectangle.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the rectangle may cover a large area and contain a
	// huge number of features.
	ListFeatures(+ACo-Rectangle, RouteGuide+AF8-ListFeaturesServer) error
	// A client-to-server streaming RPC.
	//
	// Accepts a stream of Points on a route being traversed, returning a
	// RouteSummary when traversal is completed.
	RecordRoute(RouteGuide+AF8-RecordRouteServer) error
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	RouteChat(RouteGuide+AF8-RouteChatServer) error
+AH0-

func RegisterRouteGuideServer(s +ACo-grpc.Server, srv RouteGuideServer) +AHs-
	s.RegisterService(+ACYAXw-RouteGuide+AF8-serviceDesc, srv)
+AH0-

func +AF8-RouteGuide+AF8-GetFeature+AF8-Handler(srv interface+AHsAfQ-, ctx context.Context, codec grpc.Codec, buf +AFsAXQ-byte) (interface+AHsAfQ-, error) +AHs-
	in :+AD0- new(Point)
	if err :+AD0- codec.Unmarshal(buf, in)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	out, err :+AD0- srv.(RouteGuideServer).GetFeature(ctx, in)
	if err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return out, nil
+AH0-

func +AF8-RouteGuide+AF8-ListFeatures+AF8-Handler(srv interface+AHsAfQ-, stream grpc.ServerStream) error +AHs-
	m :+AD0- new(Rectangle)
	if err :+AD0- stream.RecvMsg(m)+ADs- err +ACEAPQ- nil +AHs-
		return err
	+AH0-
	return srv.(RouteGuideServer).ListFeatures(m, +ACY-routeGuideListFeaturesServer+AHs-stream+AH0-)
+AH0-

type RouteGuide+AF8-ListFeaturesServer interface +AHs-
	Send(+ACo-Feature) error
	grpc.ServerStream
+AH0-

type routeGuideListFeaturesServer struct +AHs-
	grpc.ServerStream
+AH0-

func (x +ACo-routeGuideListFeaturesServer) Send(m +ACo-Feature) error +AHs-
	return x.ServerStream.SendMsg(m)
+AH0-

func +AF8-RouteGuide+AF8-RecordRoute+AF8-Handler(srv interface+AHsAfQ-, stream grpc.ServerStream) error +AHs-
	return srv.(RouteGuideServer).RecordRoute(+ACY-routeGuideRecordRouteServer+AHs-stream+AH0-)
+AH0-

type RouteGuide+AF8-RecordRouteServer interface +AHs-
	SendAndClose(+ACo-RouteSummary) error
	Recv() (+ACo-Point, error)
	grpc.ServerStream
+AH0-

type routeGuideRecordRouteServer struct +AHs-
	grpc.ServerStream
+AH0-

func (x +ACo-routeGuideRecordRouteServer) SendAndClose(m +ACo-RouteSummary) error +AHs-
	return x.ServerStream.SendMsg(m)
+AH0-

func (x +ACo-routeGuideRecordRouteServer) Recv() (+ACo-Point, error) +AHs-
	m :+AD0- new(Point)
	if err :+AD0- x.ServerStream.RecvMsg(m)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return m, nil
+AH0-

func +AF8-RouteGuide+AF8-RouteChat+AF8-Handler(srv interface+AHsAfQ-, stream grpc.ServerStream) error +AHs-
	return srv.(RouteGuideServer).RouteChat(+ACY-routeGuideRouteChatServer+AHs-stream+AH0-)
+AH0-

type RouteGuide+AF8-RouteChatServer interface +AHs-
	Send(+ACo-RouteNote) error
	Recv() (+ACo-RouteNote, error)
	grpc.ServerStream
+AH0-

type routeGuideRouteChatServer struct +AHs-
	grpc.ServerStream
+AH0-

func (x +ACo-routeGuideRouteChatServer) Send(m +ACo-RouteNote) error +AHs-
	return x.ServerStream.SendMsg(m)
+AH0-

func (x +ACo-routeGuideRouteChatServer) Recv() (+ACo-RouteNote, error) +AHs-
	m :+AD0- new(RouteNote)
	if err :+AD0- x.ServerStream.RecvMsg(m)+ADs- err +ACEAPQ- nil +AHs-
		return nil, err
	+AH0-
	return m, nil
+AH0-

var +AF8-RouteGuide+AF8-serviceDesc +AD0- grpc.ServiceDesc+AHs-
	ServiceName: +ACI-proto.RouteGuide+ACI-,
	HandlerType: (+ACo-RouteGuideServer)(nil),
	Methods: +AFsAXQ-grpc.MethodDesc+AHs-
		+AHs-
			MethodName: +ACI-GetFeature+ACI-,
			Handler:    +AF8-RouteGuide+AF8-GetFeature+AF8-Handler,
		+AH0-,
	+AH0-,
	Streams: +AFsAXQ-grpc.StreamDesc+AHs-
		+AHs-
			StreamName:    +ACI-ListFeatures+ACI-,
			Handler:       +AF8-RouteGuide+AF8-ListFeatures+AF8-Handler,
			ServerStreams: true,
		+AH0-,
		+AHs-
			StreamName:    +ACI-RecordRoute+ACI-,
			Handler:       +AF8-RouteGuide+AF8-RecordRoute+AF8-Handler,
			ClientStreams: true,
		+AH0-,
		+AHs-
			StreamName:    +ACI-RouteChat+ACI-,
			Handler:       +AF8-RouteGuide+AF8-RouteChat+AF8-Handler,
			ServerStreams: true,
			ClientStreams: true,
		+AH0-,
	+AH0-,
+AH0-
